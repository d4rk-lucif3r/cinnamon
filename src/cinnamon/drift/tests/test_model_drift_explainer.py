import pandas as pd, numpy as np
from numpy.testing import assert_allclose
from sklearn import datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor, XGBClassifier
from cinnamon.drift import ModelDriftExplainer, AdversarialDriftExplainer
from cinnamon.common.stat_utils import StatisticalTestResultBase, Chi2TestResult


RANDOM_SEED = 2021
NUMPY_atol = 1e-8


def test_boston_xgboost_XGBRegressor():
    boston = datasets.load_boston()
    boston_df = pd.DataFrame(boston.data, columns=boston.feature_names)
    X_train, X_test, y_train, y_test = train_test_split(boston_df, boston.target, test_size=0.3,
                                                        random_state=RANDOM_SEED)
    model = XGBRegressor(n_estimators=1000,
                         booster="gbtree",
                         objective="reg:squarederror",
                         learning_rate=0.05,
                         max_depth=6,
                         seed=RANDOM_SEED,
                         use_label_encoder=False)
    model.fit(X=X_train, y=y_train, eval_set=[(X_test, y_test)], early_stopping_rounds=20, verbose=0)
    drift_explainer = ModelDriftExplainer(model)
    drift_explainer.fit(X_train, X_test, y_train, y_test)

    # prediction drift
    assert drift_explainer.get_prediction_drift() == [{'mean_difference': -0.7907300941865429,
                                                       'wasserstein': 1.0933355933457942,
                                                       'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.053783823966696405,
                                                                                                       pvalue=0.8977000230212033)}]
    # target drift
    assert drift_explainer.get_target_drift() == {'mean_difference': -0.609240261671129,
                                                  'wasserstein': 1.3178114778471604,
                                                  'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.07857567647933393,
                                                                                                  pvalue=0.4968030078636394)}
    # performance_metrics_drift
    assert drift_explainer.get_performance_metrics_drift() == {'dataset 1': {'mse': 0.2798235381304802,
                                                                             'explained_variance': 0.9969813455726874},
                                                               'dataset 2': {'mse': 12.459430618659226,
                                                                             'explained_variance': 0.8088751025786054}}

    # feature_drift_LSTAT

    # tree_based_drift_values "node_size"
    assert_allclose(drift_explainer.get_tree_based_drift_values(type='node_size'),
                    np.array([[4.91449084],
                              [0.58104408],
                              [1.27841],
                              [0.06645859],
                              [2.53736065],
                              [6.40104981],
                              [2.77411753],
                              [4.30972915],
                              [0.75707501],
                              [1.76967233],
                              [1.45685282],
                              [2.7046629],
                              [7.52274391]]),
                    atol=NUMPY_atol)

    # tree_based_drift_values "mean"
    assert_allclose(drift_explainer.get_tree_based_drift_values(type='mean'),
                    np.array([[0.04875801],
                              [0.01055472],
                              [0.18686353],
                              [-0.00062653],
                              [0.24199658],
                              [-0.54432273],
                              [-0.04957123],
                              [-0.25782332],
                              [0.03362896],
                              [0.0017494],
                              [-0.15995592],
                              [-0.14088634],
                              [-0.03940366]]),
                    atol=NUMPY_atol)

    # tree_based_drift_values "mean_norm"
    assert_allclose(drift_explainer.get_tree_based_drift_values(type='mean_norm'),
                    np.array([[0.05357186],
                              [0.00647816],
                              [0.00223468],
                              [-0.00030556],
                              [0.07305206],
                              [-0.30163415],
                              [-0.00561431],
                              [-0.26031085],
                              [0.01544557],
                              [-0.02843446],
                              [-0.01753534],
                              [-0.03112263],
                              [-0.03282566]]),
                    atol=NUMPY_atol)

    # feature_drift_LSTAT
    assert drift_explainer.get_feature_drift('LSTAT') == {'mean_difference': 0.7378638864109419,
                                                          'wasserstein': 0.8023078352661315,
                                                          'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.08887154326494201,
                                                                                                          pvalue=0.3452770147763923)}

    # feature_drift_feature_0
    assert drift_explainer.get_feature_drift(0) == {'mean_difference': -1.1253475613291695,
                                                    'wasserstein': 1.1305975918079103,
                                                    'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.0618123699078204,
                                                                                                    pvalue=0.7813257636577198)}

    # all feature drifts
    assert drift_explainer.get_feature_drifts() == [{'mean_difference': -1.1253475613291695,
                                                     'wasserstein': 1.1305975918079103,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.0618123699078204, pvalue=0.7813257636577198)},
                                                    {'mean_difference': -0.7548691644365135,
                                                     'wasserstein': 0.8747398156407966,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.02951234017246506, pvalue=0.9999448615410187)},
                                                    {'mean_difference': -0.17914585191793364,
                                                     'wasserstein': 0.7212444246208749,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.07381801962533452, pvalue=0.5764298225321844)},
                                                    {'mean_difference': 0.02337942313410645,
                                                     'wasserstein': 0.02337942313410646,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.02337942313410645, pvalue=0.9999998980177341)},
                                                    {'mean_difference': -0.010584444692238959,
                                                     'wasserstein': 0.01748104742789176,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.07296312815938151, pvalue=0.5907168134992118)},
                                                    {'mean_difference': -0.015463871543265562,
                                                     'wasserstein': 0.07063187630092177,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.056645851917930416, pvalue=0.86067051746252)},
                                                    {'mean_difference': -0.5575044603033064,
                                                     'wasserstein': 1.22835637823372,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.04114629794826048, pvalue=0.9894125780752614)},
                                                    {'mean_difference': 0.12717342030924828,
                                                     'wasserstein': 0.17319668822479928,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.07244275944097532, pvalue=0.5998930415655818)},
                                                    {'mean_difference': -0.28690900981266765,
                                                     'wasserstein': 0.3868941421349984,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.03631430270591734, pvalue=0.9978241882813342)},
                                                    {'mean_difference': -13.692387749033628,
                                                     'wasserstein': 14.388492417484393,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.08039696699375558, pvalue=0.4679944796162433)},
                                                    {'mean_difference': 0.20367603330359785,
                                                     'wasserstein': 0.205839280404401,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.06322479928635147, pvalue=0.7594689122671989)},
                                                    {'mean_difference': 6.062043190603617,
                                                     'wasserstein': 6.4615822925958994,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.06341064525721082, pvalue=0.7559278097560319)},
                                                    {'mean_difference': 0.7378638864109419,
                                                     'wasserstein': 0.8023078352661315,
                                                     'kolmogorov_smirnov': StatisticalTestResultBase(statistic=0.08887154326494201, pvalue=0.3452770147763923)}]

    # tree_based_correction_weights with default params
    assert_allclose(drift_explainer.get_tree_based_correction_weights(),
                    np.array([1.17307918, 1.10429956, 1.19169059, 1.13529706, 1.14578311,
                              1.200479, 0.9649062, 1.1040782, 0.72199983, 1.02503113,
                              1.10821682, 0.90692646, 1.14402501, 1.16943841, 0.89823011,
                              0.49860856, 1.05420192, 1.15884044, 0.73639696, 0.82229171,
                              1.21199361, 1.11181694, 1.16128396, 0.89664012, 0.83593215,
                              1.15927253, 1.08385371, 1.19832782, 1.08061481, 0.83970824,
                              0.67884186, 1.08229419, 1.26139195, 0.94657303, 0.98498086,
                              1.03046682, 1.30314848, 0.99200532, 0.93619794, 1.21969226,
                              1.00533594, 1.04201369, 0.95046694, 1.11969526, 0.84742845,
                              1.05551917, 1.16019169, 0.97660996, 1.03919462, 0.98368205,
                              1.16404791, 0.94732921, 0.64433073, 0.92588028, 1.06609024,
                              0.85807047, 1.15019456, 0.9041984, 0.92253366, 1.05986563,
                              0.90813912, 0.79658433, 0.93378748, 0.41866103, 1.11321769,
                              1.09532792, 1.34053538, 0.9097396, 1.05295164, 1.05391176,
                              1.19440804, 1.00559, 1.19822066, 0.54226207, 1.10914477,
                              1.10470429, 1.17477269, 1.00409972, 1.14740161, 0.54482584,
                              0.76272859, 1.03716135, 1.00769731, 0.81684966, 1.04653634,
                              1.17199529, 0.98452679, 0.84458253, 0.7648663, 1.10043305,
                              1.07032943, 0.98022465, 1.11492404, 0.8880634, 0.74218069,
                              1.1932043, 0.95109895, 0.36474178, 1.05405076, 1.06515056,
                              1.06951405, 1.11754207, 0.79994208, 1.11975833, 1.0943148,
                              0.87493754, 0.98749879, 0.93484036, 1.07195407, 1.03911817,
                              1.10384068, 1.22516033, 1.10159258, 0.93925909, 1.06298456,
                              0.80235869, 1.23848544, 1.107232, 0.55608405, 0.73086594,
                              1.05723357, 0.93902368, 0.61808163, 1.02656171, 1.00817501,
                              0.98423577, 1.07234402, 1.09151527, 0.72255239, 0.87157415,
                              1.16842963, 0.92141861, 1.20364012, 1.12475587, 0.86069386,
                              1.07168903, 1.21749038, 0.65690687, 0.90819228, 0.96272015,
                              1.06238916, 1.13443926, 0.844287, 1.15204437, 0.86095568,
                              0.36529403, 0.53725626, 0.85678148, 1.00862856, 0.97270768,
                              1.43748866, 1.10257548, 1.09825674, 1.08947571, 0.37388814,
                              0.53668296, 1.23500601, 1.12470947, 1.19278362, 0.94510303,
                              1.00776462, 1.20820062, 1.06303224, 1.05105978, 1.29058967,
                              0.63277066, 0.60221109, 1.16910423, 1.16981277, 1.11942871,
                              0.9537934, 0.98443738, 1.0849316, 0.8290222, 1.00789384,
                              0.61950957, 1.02245451, 0.8330702, 1.04320452, 0.96021991,
                              0.80166563, 0.99422759, 1.03418793, 1.14262089, 0.86111115,
                              1.06633001, 1.10596964, 1.1413938, 0.96951136, 1.08869194,
                              1.11767264, 1.19460782, 1.24016088, 1.03017977, 1.03639227,
                              1.04536011, 1.04680402, 1.09302331, 0.95333154, 1.26187366,
                              0.85062876, 1.05865228, 1.10202065, 0.76674624, 0.90350575,
                              1.33108946, 0.46632369, 1.21149765, 0.77911796, 1.03232501,
                              1.16269854, 1.07684434, 0.85179834, 1.13179073, 0.96137986,
                              0.96767259, 0.93977526, 0.94300641, 0.96423001, 1.04319695,
                              0.75998146, 0.81221585, 0.97268292, 0.90971505, 0.87193452,
                              1.13512028, 1.06957513, 1.12052159, 1.05101438, 1.07174728,
                              1.14397345, 0.96879791, 1.00484637, 1.020123, 1.11576274,
                              1.27949005, 1.00969895, 1.23093211, 0.87762165, 1.11754222,
                              1.06167064, 1.11207849, 1.03891518, 1.04050737, 1.31171655,
                              1.19664899, 1.14727933, 0.95127623, 0.4850944, 0.97516067,
                              0.61839221, 1.0923905, 0.97710356, 0.90319709, 0.37564845,
                              0.98990542, 1.31876529, 1.0951119, 1.10194228, 0.66620351,
                              0.93853275, 1.1338095, 0.83854722, 1.09114115, 0.88133065,
                              0.7946076, 1.14922025, 0.81525115, 1.11380585, 1.07034183,
                              0.79821389, 0.95217574, 0.95778946, 0.53445616, 0.78168331,
                              1.13640662, 0.90417136, 1.00300019, 1.0666356, 1.06334913,
                              1.10286597, 1.07458109, 1.11791495, 1.28759224, 1.12574537,
                              1.0835987, 1.0043716, 1.13099684, 1.04718128, 0.92558712,
                              0.96849863, 1.1118371, 1.14082817, 0.98227235, 0.91048265,
                              1.23001552, 0.97053114, 0.68878288, 1.01220493, 1.00796822,
                              0.91582841, 1.04847328, 0.95905179, 0.87059411, 1.11877684,
                              1.19680597, 1.08497233, 0.97513341, 0.94617059, 1.16122938,
                              1.1232211, 0.7546364, 1.10187586, 1.01408795, 1.02770676,
                              1.11252479, 1.11156682, 1.07147014, 0.92417427, 1.10953318,
                              1.00213953, 1.04189862, 0.6621549, 1.09260932, 1.10529048,
                              0.87546568, 1.11195891, 0.77509501, 1.00462888, 0.83154827,
                              1.15078635, 0.85786918, 0.79800891, 1.11380145, 1.04628851,
                              1.1658299, 1.08542816, 0.92665663, 0.92427178, 1.08199608,
                              0.77310855, 1.06173834, 1.14117264, 1.08938491, 1.19071799,
                              1.1036898, 1.17283324, 1.10692978, 1.10861571, 1.14965191,
                              0.99824981, 1.02571374, 1.22055746, 1.09707912]),
                    atol=NUMPY_atol)

    # tree_based_correction_weights with "max_depth = 2"
    assert_allclose(drift_explainer.get_tree_based_correction_weights(max_depth=2),
                    np.array([1.0582569, 1.00670071, 1.02780781, 1.01150329, 1.03688912,
                              1.00576777, 1.00612103, 1.01511992, 1.01322022, 1.03347478,
                              1.02954666, 0.99914983, 1.05850012, 1.0292191, 0.97294076,
                              0.82615829, 1.02780781, 1.05521708, 0.99188371, 0.9831289,
                              1.01166509, 0.90378646, 1.05370445, 1.01967054, 1.0353219,
                              1.0232752, 1.01800961, 1.0273559, 0.98887101, 0.95886379,
                              1.04501309, 1.0525534, 1.05312083, 1.02271887, 1.05104311,
                              1.00471757, 1.0343851, 1.01738836, 1.01233581, 1.061134,
                              1.04299697, 1.01421838, 1.0228959, 1.04469885, 0.9894954,
                              1.00265687, 1.03623705, 1.03631859, 1.01358135, 1.01597777,
                              1.02172966, 1.02204174, 0.83166848, 0.93117947, 1.01605008,
                              1.01469444, 0.91661529, 1.01967054, 1.03592465, 1.01741396,
                              1.00382789, 1.04469193, 1.00141397, 0.74728645, 1.02906745,
                              1.06031501, 1.05473691, 1.02666007, 1.00488201, 1.00933517,
                              1.00658136, 1.04340723, 1.02903632, 0.82524041, 1.0172848,
                              1.02000109, 1.02995608, 0.8681523, 1.03138448, 0.79215619,
                              1.04684971, 1.01526221, 1.00804983, 0.79556459, 1.0068124,
                              1.02930453, 1.04688084, 1.00587795, 0.78993104, 1.00870625,
                              0.96219822, 1.01430715, 1.04469193, 0.91657232, 0.83016682,
                              1.02802593, 1.04568853, 0.73346207, 1.02750187, 1.00962653,
                              1.02027967, 1.02206637, 1.0353219, 1.03623705, 1.03187405,
                              0.98157129, 1.00775198, 1.01138531, 1.01465086, 1.02172783,
                              1.04511281, 1.0243181, 1.02986528, 1.03315717, 1.02750187,
                              1.00290184, 1.01612785, 1.05724868, 0.82524041, 0.78535912,
                              1.00020967, 0.87923036, 0.8396892, 1.01402176, 1.01597813,
                              1.00230231, 1.01417279, 1.02202794, 0.84071042, 1.01760687,
                              1.02494963, 1.05797844, 1.03436595, 1.01038303, 1.05506159,
                              1.0196529, 1.03639186, 0.93657553, 0.88233607, 1.02506785,
                              1.02436659, 1.05132528, 1.0019079, 1.03772613, 1.00775198,
                              0.64759301, 0.78293874, 1.02119678, 1.01898273, 1.01732744,
                              1.05724568, 1.02266183, 1.0252554, 1.02009781, 0.63912218,
                              0.83505949, 1.04158229, 1.01954571, 1.02081984, 1.03386576,
                              0.87173121, 1.05248492, 1.01818577, 1.02021987, 1.05252078,
                              0.72940923, 0.86101295, 1.0310369, 1.02842619, 1.05071831,
                              1.01300651, 1.02150085, 1.01597777, 1.02544089, 1.00910509,
                              0.79240637, 1.01855657, 0.99872639, 1.02874935, 1.04683248,
                              1.04688084, 0.98525423, 1.01169174, 1.02867249, 1.00089645,
                              1.07349237, 1.00822084, 1.07375274, 1.03315717, 1.01334828,
                              1.03108635, 1.0176312, 1.06534155, 1.03928143, 1.01845684,
                              1.02264917, 1.05232278, 1.02688857, 1.02371771, 1.05921163,
                              1.00610203, 1.05903805, 1.02161461, 0.85472849, 1.00022545,
                              1.21358172, 0.74728645, 1.03217915, 0.78535912, 1.04688084,
                              1.04949284, 1.03315717, 0.94982671, 1.03436595, 1.02215344,
                              1.02366864, 1.02688472, 0.96627752, 1.02045449, 1.01117574,
                              1.0353219, 1.03528255, 1.01741396, 1.01439825, 1.03131391,
                              1.04822021, 1.02874935, 1.01227542, 1.02888112, 1.01233581,
                              1.01078483, 0.86769516, 1.02550814, 1.01684283, 1.0338169,
                              1.04651762, 1.01388886, 1.06227251, 1.0198984, 1.01353115,
                              1.02565277, 1.02964456, 1.01227542, 1.02665291, 1.03480824,
                              1.04360213, 1.01016196, 1.00640105, 0.94432931, 1.0171349,
                              0.87698451, 1.01815217, 1.03185809, 1.04755748, 0.73247884,
                              1.03704095, 1.05824615, 1.0358401, 1.00699825, 0.80067744,
                              1.03347478, 1.03563177, 1.03315717, 1.0405324, 1.01384475,
                              1.02888112, 1.02067834, 1.01759046, 1.01619322, 1.01848426,
                              1.02565277, 0.87067231, 1.00203294, 0.7774344, 1.00711629,
                              1.03649701, 1.01469444, 1.00670071, 1.02917602, 1.02416993,
                              1.00986349, 1.0257819, 1.0248167, 1.03356106, 1.02874553,
                              1.04224102, 1.04211948, 1.02562278, 1.05082067, 1.03315717,
                              1.0353219, 1.01435257, 1.01429057, 0.90506559, 1.04282809,
                              1.03309092, 1.01117834, 0.94065906, 1.01738094, 1.01159049,
                              1.02762745, 1.01227542, 1.0196529, 1.00291289, 1.03501383,
                              1.02626132, 1.01001231, 1.00710689, 1.033865, 1.02297717,
                              1.00776766, 1.03347478, 1.02917602, 1.00804983, 0.9844154,
                              0.97253672, 1.0358401, 1.00986349, 1.00235212, 1.02034128,
                              1.01066513, 1.03388299, 1.01900233, 1.04207765, 1.03390331,
                              0.9927288, 0.92165943, 0.98165689, 0.9094749, 1.04221711,
                              1.02917602, 1.00775198, 0.89860475, 1.02330345, 1.03180699,
                              1.04223021, 1.01741943, 0.99429937, 1.0069181, 1.03704095,
                              1.00775198, 1.02750339, 1.01588284, 0.90758758, 1.0465381,
                              1.01198529, 1.02954706, 1.02780781, 1.01883045, 1.0258135,
                              1.03223902, 0.88213941, 1.06822964, 1.00670071]),
                    atol=NUMPY_atol)

    # sample_weights1
    assert_allclose(drift_explainer.sample_weights1[:5],
                    np.array([1., 1., 1., 1., 1.]),
                    atol=NUMPY_atol)

    # sample_weights2
    assert_allclose(drift_explainer.sample_weights2[:5],
                    np.array([1., 1., 1., 1., 1.]),
                    atol=NUMPY_atol)

    assert drift_explainer.cat_feature_indices == []
    assert drift_explainer.class_names == []
    assert drift_explainer.feature_names == ['CRIM',
                                             'ZN',
                                             'INDUS',
                                             'CHAS',
                                             'NOX',
                                             'RM',
                                             'AGE',
                                             'DIS',
                                             'RAD',
                                             'TAX',
                                             'PTRATIO',
                                             'B',
                                             'LSTAT']
    assert drift_explainer.iteration_range == (0, 163)
    assert drift_explainer.n_features == 13
    assert drift_explainer.task == 'regression'
